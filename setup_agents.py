#!/usr/bin/env python3
"""
Qynva Agentic LLM Framework Setup Script
Generated by Agentic LLM Framework
"""
import os
import sys
import json
import subprocess
from pathlib import Path

def create_directories():
    """Create necessary directories for the agent framework"""
    directories = [
        "agents/logs",
        "agents/staging", 
        "agents/configs",
        "agents/prompts",
        "docs",
        ".github/ISSUE_TEMPLATE",
        "tests",
        "src"
    ]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        print(f"‚úÖ Created directory: {directory}")

def setup_environment():
    """Set up Python environment and dependencies"""
    try:
        # Check Python version
        if sys.version_info < (3, 7):
            print("‚ùå Python 3.7 or higher is required")
            return False
        
        print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor} detected")
        
        # Create virtual environment if it doesn't exist
        venv_path = Path("venv")
        if not venv_path.exists():
            print("üì¶ Creating virtual environment...")
            subprocess.run([sys.executable, "-m", "venv", "venv"], check=True)
            print("‚úÖ Virtual environment created")
        
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Failed to set up environment: {e}")
        return False

def install_dependencies():
    """Install required Python packages"""
    dependencies = [
        "requests>=2.25.0",
        "pyyaml>=5.4.0", 
        "click>=8.0.0",
        "pytest>=6.0.0",
        "pytest-cov>=2.12.0"
    ]
    
    # Determine pip executable
    pip_exe = "venv/bin/pip" if os.name != 'nt' else "venv\\Scripts\\pip.exe"
    
    if not Path(pip_exe).exists():
        pip_exe = sys.executable.replace("python", "pip")
    
    try:
        for dep in dependencies:
            print(f"üì¶ Installing {dep}...")
            subprocess.run([pip_exe, "install", dep], check=True, capture_output=True)
        
        print("‚úÖ All dependencies installed successfully")
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Failed to install dependencies: {e}")
        return False

def setup_configuration():
    """Set up initial configuration files"""
    config_path = Path("agents/configs/config.json") 
    
    if config_path.exists():
        print("‚ö†Ô∏è  Configuration file already exists, skipping...")
        return True
    
    config = {
        "llm_providers": {
            "grok": {
                "api_key": "${GROK_API_KEY}",
                "model": "grok-beta",
                "endpoint": "https://api.x.ai/v1"
            },
            "openai": {
                "api_key": "${OPENAI_API_KEY}",
                "model": "gpt-4",
                "endpoint": "https://api.openai.com/v1"
            },
            "claude": {
                "api_key": "${CLAUDE_API_KEY}",
                "model": "claude-3-sonnet-20240229",
                "endpoint": "https://api.anthropic.com/v1"
            }
        },
        "default_provider": "grok",
        "workflow": {
            "auto_commit": False,
            "staging_dir": "agents/staging",
            "review_threshold": 0.8
        },
        "coverage_threshold": 80
    }
    
    with open(config_path, 'w') as f:
        json.dump(config, f, indent=2)
    
    print("‚úÖ Configuration file created")
    return True

def make_agents_executable():
    """Make agent scripts executable on Unix systems"""
    if os.name == 'nt':  # Windows
        print("‚ÑπÔ∏è  Skipping executable permissions on Windows")
        return True
    
    agent_files = [
        "agents/planner.py",
        "agents/coder.py", 
        "agents/tester.py",
        "agents/router.py"
    ]
    
    for agent_file in agent_files:
        if Path(agent_file).exists():
            os.chmod(agent_file, 0o755)
            print(f"‚úÖ Made {agent_file} executable")
    
    return True

def create_example_env():
    """Create example environment file"""
    env_example = """# Qynva Agentic LLM Framework Environment Variables
# Copy this file to .env and fill in your API keys

# Grok API (xAI) - Primary LLM provider
GROK_API_KEY=your-grok-api-key-here

# OpenAI API - Alternative LLM provider  
OPENAI_API_KEY=your-openai-api-key-here

# Claude API (Anthropic) - Alternative LLM provider
CLAUDE_API_KEY=your-claude-api-key-here

# Optional: Set default provider
DEFAULT_LLM_PROVIDER=grok

# Optional: Enable debug logging
QYNVA_DEBUG=false

# Optional: Custom staging directory
QYNVA_STAGING_DIR=agents/staging
"""
    
    with open(".env.example", 'w') as f:
        f.write(env_example)
    
    print("‚úÖ Created .env.example file")
    return True

def verify_setup():
    """Verify that the setup completed successfully"""
    print("\\nüîç Verifying setup...")
    
    checks = [
        ("agents/planner.py exists", Path("agents/planner.py").exists()),
        ("agents/coder.py exists", Path("agents/coder.py").exists()), 
        ("agents/tester.py exists", Path("agents/tester.py").exists()),
        ("agents/router.py exists", Path("agents/router.py").exists()),
        ("Configuration exists", Path("agents/configs/config.json").exists()),
        ("Documentation exists", Path("docs/llm-workflow.md").exists()),
        ("Issue templates exist", Path(".github/ISSUE_TEMPLATE").exists()),
        (".gitignore exists", Path(".gitignore").exists())
    ]
    
    all_good = True
    for check_name, check_result in checks:
        status = "‚úÖ" if check_result else "‚ùå"
        print(f"{status} {check_name}")
        if not check_result:
            all_good = False
    
    return all_good

def print_next_steps():
    """Print instructions for next steps"""
    print("""
üéâ Qynva Agentic LLM Framework Setup Complete!

üìã Next Steps:

1. **Set up API Keys:**
   - Copy .env.example to .env
   - Add your LLM provider API keys
   - At minimum, set GROK_API_KEY for the default provider

2. **Test the Setup:**
   python agents/router.py health

3. **Run Your First Workflow:**
   python agents/router.py workflow "Create a simple hello world program"

4. **Explore Individual Agents:**
   python agents/planner.py "Design a REST API"
   python agents/coder.py "Implement user authentication" --language python
   python agents/tester.py src/main.py --type unit

5. **Read the Documentation:**
   - docs/llm-workflow.md - Complete workflow documentation
   - GitHub issue templates for community contributions

6. **Join the Community:**
   - Star the repository ‚≠ê
   - Create issues for bugs or feature requests
   - Submit pull requests for improvements

Happy coding with AI agents! ü§ñ‚ú®
""")

def main():
    """Main setup function"""
    print("üöÄ Setting up Qynva Agentic LLM Framework...")
    print("=" * 50)
    
    steps = [
        ("Creating directories", create_directories),
        ("Setting up environment", setup_environment),
        ("Installing dependencies", install_dependencies), 
        ("Configuring framework", setup_configuration),
        ("Making agents executable", make_agents_executable),
        ("Creating environment template", create_example_env),
        ("Verifying setup", verify_setup)
    ]
    
    for step_name, step_func in steps:
        print(f"\\nüìã {step_name}...")
        if not step_func():
            print(f"‚ùå Setup failed at: {step_name}")
            sys.exit(1)
    
    print_next_steps()

if __name__ == "__main__":
    main()